Основные компоненты:
main.c - точка входа, инициализация окна и главный игровой цикл
renderer.c - рендеринг с использованием OpenGL
input.c - обработка пользовательского ввода
world.c - логика игрового мира и уровней
player.c - логика игрока
enemy.c - логика врагов
weapon.c - система оружия
collision.c - обнаружение столкновений
audio.c - простая система звука (можно использовать WinAPI для воспроизведения)

Вспомогательные модули:
math.c - математические функции (векторы, матрицы)
texture.c - загрузка и управление текстурами
sprite.c - работа со спрайтами
map.c - загрузка и обработка карт уровней

Структуры данных:
list.c - реализация динамического списка
hashmap.c - простая хеш-таблица для быстрого доступа к данным
Рендеринг:
raycaster.c - основной алгоритм рейкастинга для создания псевдо-3D эффекта
bsp.c - реализация BSP-дерева для оптимизации рендеринга1

Ресурсы:
resource.c - управление игровыми ресурсами (текстуры, звуки, уровни)
Утилиты:
logger.c - система логирования для отладки
timer.c - точное измерение времени для игрового цикла

Идеи для реализации:

Используйте рейкастинг для создания псевдо-3D эффекта, как в оригинальном Doom.
Реализуйте систему секторов для создания уровней с различной высотой пола и потолка.
Используйте спрайты для отображения врагов и предметов.
Реализуйте простую систему освещения для создания атмосферы.
Создайте редактор уровней, который сохраняет данные в простом текстовом формате. (вот это надо сделать, вожно)
Используйте BSP-деревья для оптимизации рендеринга и определения видимости объектов. (на будущее) ok
Реализуйте систему коллизий, основанную на 2D-карте уровня.
Создайте простую систему частиц для эффектов взрывов и крови.
Используйте технику параллакса для создания иллюзии глубины на текстурах стен.
Реализуйте простую систему искусственного интеллекта для врагов, основанную на состояниях (патрулирование, преследование, атака).


**********************************************************************
    x_collision = sq1_right >= sq2_left and sq2_right >= sq1_left
    y_collision = sq1_bottom >= sq2_top and sq2_bottom >= sq1_top

    return x_collision and y_collision
**********************************************************************